name: release

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  build-artifacts:
    name: build-artifacts
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x64
          - os: ubuntu-latest
            arch: x86
          - os: windows-latest
            arch: x64
          - os: windows-latest
            arch: x86
          - os: macos-latest
            arch: x64
          - os: macos-latest
            arch: arm64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Setup Node
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      # Setup Rust
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup for cross-compilation
        if: matrix.arch != 'x64'
        run: |
          if [ "${{ runner.os }}" = "Linux" ] && [ "${{ matrix.arch }}" = "x86" ]; then
            rustup target add i686-unknown-linux-gnu
            sudo apt-get update
            sudo apt-get install -y gcc-multilib
          elif [ "${{ runner.os }}" = "Windows" ] && [ "${{ matrix.arch }}" = "x86" ]; then
            rustup target add i686-pc-windows-msvc
          elif [ "${{ runner.os }}" = "macOS" ] && [ "${{ matrix.arch }}" = "arm64" ]; then
            rustup target add aarch64-apple-darwin
          fi

      - name: Install Dependencies
        run: npm install -g pnpm && pnpm install
      
      - name: Run Release Build (x64)
        if: matrix.arch == 'x64'
        run: pnpm build:release
      
      - name: Run Release Build (cross-compiled)
        if: matrix.arch != 'x64'
        run: |
          if [ "${{ runner.os }}" = "Linux" ] && [ "${{ matrix.arch }}" = "x86" ]; then
            pnpm napi build --platform --release --target i686-unknown-linux-gnu --esm --output-dir src --js native.js --dts native.d.ts
          elif [ "${{ runner.os }}" = "Windows" ] && [ "${{ matrix.arch }}" = "x86" ]; then
            pnpm napi build --platform --release --target i686-pc-windows-msvc --esm --output-dir src --js native.js --dts native.d.ts
          elif [ "${{ runner.os }}" = "macOS" ] && [ "${{ matrix.arch }}" = "arm64" ]; then
            pnpm napi build --platform --release --target aarch64-apple-darwin --esm --output-dir src --js native.js --dts native.d.ts
          fi
          pnpm build:ts && pnpm build:copy      

      - name: Run Tests
        run: pnpm test:ci

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: qrbit-artifacts-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/*.node

  build-release:
    name: build-release
    needs: build-artifacts
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Setup Node
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install Dependencies
        run: npm install -g pnpm && pnpm install

      - name: Build Typescript Project
        run: pnpm build

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Show Artifacts
        run: |
          ls -alh ./artifacts

      - name: Remove Artifacts in Dist
        run: rm -f dist/*.node

      - name: Copy all artifacts that end in .node to dist
        run: |
          find ./artifacts -name "*.node" -exec cp {} dist/ \;

      - name: Show Dist
        run: |
            ls -alh ./dist

      - name: Publish
        run: |
         npm config set //registry.npmjs.org/:_authToken ${NPM_TOKEN}
         npm publish --ignore-scripts
        env:
         NPM_TOKEN: ${{ secrets.NPM_TOKEN }}