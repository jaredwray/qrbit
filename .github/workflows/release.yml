name: release

on:
  workflow_dispatch:
  release:
    types: [published]
  push:
    branches: [ fix/binaries ]

jobs:
  build-artifacts:
    name: build-artifacts
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x64
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            arch: x64
            target: x86_64-unknown-linux-musl
            container: node:22-alpine
            build_env: alpine
          - os: windows-latest
            arch: x64
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            arch: x64
            target: x86_64-apple-darwin

    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Setup Node - Skip for Alpine (already in container)
      - name: Use Node.js
        if: matrix.build_env != 'alpine'
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install Alpine Dependencies
        if: matrix.build_env == 'alpine'
        run: |
          apk add --no-cache \
            python3 \
            make \
            g++ \
            musl-dev \
            clang \
            llvm \
            build-base

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Dependencies
        run: npm install -g pnpm && pnpm install

      - name: Rust
        run: |
          rustup target add ${{matrix.target}}
          pnpm napi build --platform --release --output-dir src --target ${{ matrix.target }}

      - name: Build
        run: pnpm build:release

      - name: Run Tests
        run: pnpm test:ci

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: qa-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.target }}
          path: dist/*.node

  build-release:
    name: build-release
    needs: build-artifacts
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Setup Node
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install Dependencies
        run: npm install -g pnpm && pnpm install

      - name: Build Typescript Project
        run: pnpm build:release

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Show Artifacts
        run: ls -alhR ./artifacts

      - name: Remove Artifacts in Dist
        run: rm -f dist/*.node

      - name: Copy all artifacts that end in .node to dist
        run: |
          find ./artifacts -name "*.node" -exec cp {} dist/ \;

      - name: Show Dist
        run: |
            ls -alh ./dist

      - name: Publish
        run: |
         npm config set //registry.npmjs.org/:_authToken ${NPM_TOKEN}
         npm publish --ignore-scripts
        env:
         NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
